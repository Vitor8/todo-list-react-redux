{"version":3,"sources":["components/TaskCard.js","actions/index.js","components/TodoList.js","components/TasksToDo.js","components/TaskDoneListCard.js","components/TasksDoneList.js","components/TasksDone.js","components/UpdateTask.js","pages/Home.js","App.js","reportWebVitals.js","reducers/todolist.js","reducers/index.js","store/index.js","index.js"],"names":["connect","dispatch","removeTask","taskId","type","payload","tasksActions","finishTask","task","prepareToUpdateTask","className","textTask","onClick","id","state","tasksList","todolist","tasksTodo","map","addTask","newTask","useState","setNewTask","value","onChange","e","target","TaskDoneListCard","tasksDone","TasksDone","taskToUpdate","updateTask","updatedTask","setUpdatedTask","newTextTask","objectTaskUpdated","updateStateComponent","updateGlobalState","taskBeingUpdated","App","exact","path","component","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAl_STATE","action","length","newTasksTodo","filter","updateTasksTodo","newObjectUpdatedTask","positionToUpdate","forEach","index","tasksTodoUpdated","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.eed4bf4a.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as tasksActions from '../actions';\nimport '../css/TaskCard.css';\n\nfunction TaskCard({ task, removeTask, finishTask, prepareToUpdateTask }) {\n  return (\n    <div>\n      <p className=\"task-card-textTask\">{ task.textTask }</p>\n      <button className=\"task-card-button\" type=\"button\" onClick={ () => finishTask(task) }>\n        Finalizar\n      </button>\n      <button className=\"task-card-button\" type=\"button\" onClick={ () => removeTask(task.id) }>\n        Deletar\n      </button>\n      <button className=\"task-card-button\" type=\"button\" onClick={ () => prepareToUpdateTask(task) }>\n        Atualizar\n      </button>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeTask: (taskId) => dispatch(tasksActions.removeTask(taskId)),\n  finishTask: (task) => dispatch(tasksActions.finishTask(task)),\n  prepareToUpdateTask: (task) => dispatch(tasksActions.prepareToUpdateTask(task)),\n});\n\nexport default connect(null, mapDispatchToProps)(TaskCard);\n","\nexport const addTask = (task) => ({\n  type: 'ADD_TASK',\n  payload: task,\n});\n\nexport const removeTask = (taskId) => ({\n  type: 'REMOVE_TASK',\n  payload: taskId,\n});\n\nexport const finishTask = (task) => ({\n  type: 'FINISH_TASK',\n  payload: task,\n});\n\nexport const prepareToUpdateTask = (task) => ({\n  type: 'PREPARE_TO_UPDATE_TASK',\n  payload: task,\n});\n\nexport const updateTask = (task) => ({\n  type: 'UPDATE_TASK',\n  payload: task,\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport TaskCard from './TaskCard';\n\nfunction TodoList({ tasksList }) {\n  return (\n    <div>\n      { tasksList.map((task) => {\n        return (\n          <TaskCard task={ task } />\n        );\n      }) }\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  tasksList: state.todolist.tasksTodo,\n});\n\nexport default connect(mapStateToProps)(TodoList);","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport TodoList from './TodoList';\nimport * as tasksActions from '../actions/index';\nimport '../css/Home.css';\n\nfunction TasksToDo({ addTask }) {\n  const [newTask, setNewTask] = useState('');\n\n  function updateListTask() {\n    addTask(newTask);\n    setNewTask('');\n  }\n\n  return (\n    <div className=\"tasks-to-do-container\">\n\n      <div className=\"tasks-to-do-context\">\n        <div className=\"tasks-to-do-header\">\n          <h3>Tasks To-Do</h3>\n          <input\n            type=\"text\"\n            value={ newTask }\n            onChange={ (e) => setNewTask(e.target.value) }\n            className=\"task-to-do-input\"\n          /> <br />\n          <button\n            onClick={ () => updateListTask() }\n            className=\"tasks-to-do-button-add-task\"\n          >\n            Acrescentar Tarefa\n          </button>\n        </div>\n\n        <div className=\"tasks-to-do-list\">\n          <TodoList />\n        </div>\n      </div>\n      \n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTask: (newTask) => dispatch(tasksActions.addTask(newTask)),\n});\n\nexport default connect(null, mapDispatchToProps)(TasksToDo);","import React from 'react';\n\nfunction TaskDoneListCard({ task }) {\n  return (\n    <div>\n      <p>{ task.textTask }</p>\n    </div>\n  )\n}\n\nexport default TaskDoneListCard;\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport TaskDoneListCard from './TaskDoneListCard'\n\nfunction TasksDoneList({ tasksDone }) {\n  return (\n    <div>\n      { tasksDone.map((task) => {\n        return (\n          <TaskDoneListCard task={ task } />\n        );\n      }) }\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  tasksDone: state.todolist.tasksDone,\n});\n\nexport default connect(mapStateToProps)(TasksDoneList);\n","import React from 'react';\nimport TasksDoneList from './TasksDoneList';\nimport '../css/Home.css';\n\nfunction TasksDone() {\n  return (\n    <div className=\"tasks-to-do-container\">\n      <div className=\"tasks-to-do-context\">\n        <div className=\"tasks-to-do-header\">\n          <h3>Tasks Done</h3>\n          <TasksDoneList />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TasksDone;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as tasksActions from '../actions';\nimport '../css/Home.css';\n\nfunction UpdateTask({ taskToUpdate, updateTask }) {\n  const [updatedTask, setUpdatedTask] = useState(taskToUpdate);\n\n  function updateGlobalState() {\n    const objectTaskUpdated = {\n      id: taskToUpdate.id,\n      textTask: updatedTask.textTask,\n    }\n    updateTask(objectTaskUpdated);\n  }\n\n  function updateStateComponent(newTextTask) {\n    const objectTaskUpdated = {\n      id: taskToUpdate.id,\n      textTask: newTextTask,\n    } \n    setUpdatedTask(objectTaskUpdated);\n  }\n\n  return (\n    <div className=\"tasks-to-do-container\">\n      <div className=\"tasks-to-do-context\">\n        <div className=\"tasks-to-do-header\">\n          <h3>Task para Atualizar</h3>\n          <p>{ taskToUpdate.textTask }</p>\n          <input\n            type=\"text\"\n            onChange={ (e) => updateStateComponent(e.target.value) }\n            className=\"task-to-do-input\"\n          />\n          <button className=\"tasks-to-do-button-update-task\" onClick={ () => updateGlobalState() }>\n            Atualizar Tarefa\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  taskToUpdate: state.todolist.taskToUpdate,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTask: (task) => dispatch(tasksActions.updateTask(task)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTask);\n","import React from 'react';\nimport TasksToDo from '../components/TasksToDo';\nimport TasksDone from '../components/TasksDone';\nimport UpdateTask from '../components/UpdateTask';\nimport { connect } from 'react-redux';\nimport '../css/Home.css';\n\nfunction Home({ taskBeingUpdated }) {\n  return (\n    <div className=\"home-container\" >\n      { taskBeingUpdated ? <UpdateTask /> : <TasksToDo /> }\n      <TasksDone />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  taskBeingUpdated: state.todolist.taskBeingUpdated,\n});\n\nexport default connect(mapStateToProps)(Home);\n","import './css/Home.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Home } />\n    </Switch>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Estado global da aplicação\n\nconst INITIAl_STATE = {\n  tasksTodo: [],\n  tasksDone: [],\n  taskToUpdate: {},\n  taskBeingUpdated: false,\n};\n\nconst todolist = (state = INITIAl_STATE, action) => {\n  switch (action.type) {\n  case 'ADD_TASK':\n    const newTask = {\n      id: state.tasksTodo.length,\n      textTask: action.payload,\n    }\n    return {\n      ...state,\n      tasksTodo: [...state.tasksTodo, newTask ]\n    };\n\n  case 'REMOVE_TASK':\n    const newTasksTodo = state.tasksTodo.filter((task) => task.id != action.payload);\n    return {\n      ...state,\n      tasksTodo: newTasksTodo,\n    };\n\n  case 'FINISH_TASK':\n    const updateTasksTodo = state.tasksTodo.filter((task) => task.id != action.payload.id);\n    return {\n      tasksTodo: updateTasksTodo,\n      tasksDone: [...state.tasksDone, action.payload]\n    };\n\n  case 'PREPARE_TO_UPDATE_TASK':\n    return {\n      ...state,\n      taskToUpdate: action.payload,\n      taskBeingUpdated: true,\n    }\n\n  case 'UPDATE_TASK':\n    const newObjectUpdatedTask = {\n      id: action.payload.id,\n      textTask: action.payload.textTask,\n    }\n    let positionToUpdate = null;\n    state.tasksTodo.forEach((task, index) => {\n      if (task.id === action.payload.id) {\n        positionToUpdate = index;\n      }\n    })\n    const tasksTodoUpdated = [...state.tasksTodo];\n    tasksTodoUpdated[positionToUpdate] = newObjectUpdatedTask;\n    return {\n      ...state,\n      tasksTodo: tasksTodoUpdated,\n      taskToUpdate: {},\n      taskBeingUpdated: false,\n    }\n\n  default:\n    return state;\n  }\n};\n\nexport default todolist;","import { combineReducers } from 'redux';\n\nimport todolist from './todolist';\n\nconst rootReducer = combineReducers({\n  todolist,\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport './css/Home.css';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <BrowserRouter basename=\"/todo-list-react-redux\">\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}